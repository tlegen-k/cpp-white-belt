/*
 * rational_eq_add_sub.cpp
 *
 *  Created on: Jan 16, 2020
 *      Author: tlegenkamidollayev
 */

#include <iostream>
using namespace std;

class Rational {
public:
    Rational() {
        // Реализуйте конструктор по умолчанию
    	num = 0;
    	denom = 1;
    }

    Rational(int numerator, int denominator) {
        // Реализуйте конструктор
//    	cout << numerator << " " << denominator << endl;
    	int a=abs(numerator);
    	int b=abs(denominator);
    	int gcd = 1;
//    	cout << a << " " << b << endl;

    	while (a>0 && b>0)
    	{
    		if (a>b)
    		{
    			a=a%b;
    		}
    		else
    		{
    			b=b%a;
    		}
    	}

    	gcd = a+b;

    	num = numerator/gcd;
    	denom = denominator/gcd;

    	if ((num < 0 && denom < 0) || (num > 0 && denom < 0))  {
    		num = -num;
    		denom = -denom;
    	}
    	else if (numerator==0){
    		num = 0;
    		denom = 1;

    	}
 /*   	cout << gcd << endl;
    	cout << num << endl;
    	cout << denom << endl;*/
    }

    int Numerator() const {
        // Реализуйте этот метод
    	return num;
    }

    int Denominator() const {
        // Реализуйте этот метод
    	return denom;
    }


private:
    // Добавьте поля
    int num;
    int denom;
};

Rational operator+( const Rational& lhs, const Rational& rhs) {
	int top;
	top = lhs.Numerator() * rhs.Denominator() + rhs.Numerator() * lhs.Denominator();
	int bot;
	bot = lhs.Denominator() * rhs.Denominator();
	return Rational(top, bot);
}

Rational operator-(const Rational& lhs, const Rational& rhs) {
	int top = lhs.Numerator() * rhs.Denominator() - rhs.Numerator() * lhs.Denominator();
	int bot = lhs.Denominator() * rhs.Denominator();
	return Rational(top, bot);
}
bool operator==(const Rational& lhs, const Rational& rhs) {
	if ((lhs.Numerator()==rhs.Numerator() ) && (lhs.Denominator()==rhs.Denominator()))
	{
		return true;
	}
	else
	{
		return false;
	}
}
